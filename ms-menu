#!/bin/sh

##########################################################################
#   Description:
#       Simple menu system for running microsynteny tools
#
#   Conventions:
#       Global variables capitalized, local all lower-case
#       Constants all caps
#
#   History:
#   Date        Name        Modification
#   2022-04-12  Jason Bacon Begin
##########################################################################

usage()
{
    printf "Usage: $0\n"
    exit 1
}


##########################################################################
#   Function description:
#       Pause until user presses return
##########################################################################

pause()
{
    local junk
    
    printf "Press return to continue..."
    read junk
}


##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2022-04-16  Jason Bacon Begin
##########################################################################

get_adjacent_genes_max_nt()
{
    printf "\nAdjacent genes? [3] "
    read Genes
    if [ 0"$Adjacent_genes" = 0 ]; then
	Adjacent_genes=3
    fi
    printf "Max distance in NT? [1,000,000] "
    read Max_nt
    if [ 0"$Max_nt" = 0 ]; then
	Max_nt=1000000
    fi
}


##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2022-04-16  Jason Bacon Begin
##########################################################################

get_gene_list_filename()
{
    cd Genes
    ls *-ortho.txt
    cd ..
    local default=de-tf-refined-ortho.txt
    printf "Gene list? [$default] "
    read Gene_list_filename
    if [ 0"$Gene_list_filename" = 0 ]; then
	Gene_list_filename=$default
    fi
    Gene_list_filename="Genes/$Gene_list_filename"
}


##########################################################################
#   Main
##########################################################################

if [ $# != 0 ]; then
    usage
fi

if [ $0 = ./ms-menu ]; then
    export PATH=.:$PATH
    make
fi

selection=''
while [ 0"$selection" != 0q ]; do
    clear
    # Benner generated at https://www.ascii-art-generator.org
    cat << EOM
	   __  ____                                  __                   
	  /  |/  (_)_____________  _______  ______  / /____  ____  __  __
	 / /|_/ / / ___/ ___/ __ \/ ___/ / / / __ \/ __/ _ \/ __ \/ / / /
	/ /  / / / /__/ /  / /_/ (__  ) /_/ / / / / /_/  __/ / / / /_/ /
       /_/  /_/_/\___/_/   \____/____/\__, /_/ /_/\__/\___/_/ /_/\__, /
				     /____/                     /____/
			     ______            __
			    /_  __/___  ____  / /____
			     / / / __ \/ __ \/ / ___/
			    / / / /_/ / /_/ / (__  )
			   /_/  \____/\____/_/____/

1.. Add latest Biomart orthologs (Genes/biomart-orthologs.tsv.xz) to lists
2.. Download Ensembl GFFs, transcriptomes and genomes (may take a while)
3.. Extract regions
4.. Find intersections between regions across fish and mammals
5.. View stacked regions across species (scale discarded)
6.. Visualize regions in scale
7.. Show percent changed stats for fish and mammals
    (Extract regions for de-tf-ortho.txt and non-de-tf-ortho.txt first)
8.. Locate genes in one or more GFF files
9.. Build/download BLAST databases
10. BLAST a Danio gene against another species
Q.. Quit

EOM
    printf "Selection? "
    read selection
    case "$selection" in
    1)
	cd Genes
	add-ortho.sh
	cd ..
	;;
    
    2)
	cd GFF
	./fetch-gffs.sh
	cd ../Transcriptome
	./fetch-cdnas.sh
	cd ../Reference
	./fetch-refs.sh
	cd ..
	;;
    
    3)
	get_adjacent_genes_max_nt
	get_gene_list_filename
	mkdir -p Output
	ms-gene-list-extract \
	    --adjacent-genes $Adjacent_genes --max-nt-distance $Max_nt \
	    $Gene_list_filename 2>&1 | tee Output/gene-list-extract.out
	;;
    
    4)
	get_adjacent_genes_max_nt
	get_gene_list_filename
	mkdir -p Output
	ms-gene-list-fish-mammal-intersect $Adjacent_genes $Max_nt $Gene_list_filename \
	    2>&1 | tee Output/gene-list-fish-mammal-intersect.out
	more Output/gene-list-fish-mammal-intersect.out
	;;
    
    5)
	printf "Gene name? "
	read gene
	if [ 0"$gene" != 0 ]; then
	    cat << EOM

The last two numbers in each filename indicate the number of adjacent genes
and maximum distance in NT for that region.  Choose from among these to
answer the next two questions.  You can also generate additional region
files by going back to option 2.

EOM
	    ls Regions/*-$gene-*.gff3
	    get_adjacent_genes_max_nt
	    ms-stack $Adjacent_genes $Max_nt $gene
	fi
	;;
    
    6)
	printf "Gene name? "
	read gene
	if [ 0"$gene" != 0 ]; then
	    cat << EOM

The last two numbers in each filename indicate the number of adjacent genes
and maximum distance in NT for that region.  Choose from among these to
answer the next two questions.  You can also generate additional region
files by going back to option 2.

EOM
	    ls Regions/*-$gene-*.gff3
	    get_adjacent_genes_max_nt
	    cd Regions
	    printf "\nCut and paste species names separated by space.\n\n"
	    ls | cut -d - -f 1 | sort | uniq
	    cd ..
	    printf "\nSpecies? [all] "
	    read species
	    ms-plot $Adjacent_genes $Max_nt $gene $species
	fi
	;;

    7)
	get_adjacent_genes_max_nt
	ms-fish-mammal-percent-changed $Adjacent_genes $Max_nt
	;;

    8)
	printf "Gene names (separated by space)? "
	read genes
	if [ 0"$genes" != 0 ]; then
	    printf "\nAvailable species:\n\n"
	    cd GFF
	    ls *.gff3 | cut -d . -f 1
	    cd ..
	    default="Homo_sapiens Mus_musculus Rattus_norvegicus"
	    printf "\nSpecies? [$default] "
	    read species_list
	    if [ 0"$species" = 0 ]; then
		species_list="$default"
	    fi
	    gff_list=''
	    for species in $species_list; do
		gff_list="$gff_list GFF/$species.*.gff3"
	    done
	    for gene in $genes; do
		ms-locate-gene $gene $gff_list
	    done
	fi
	;;
    
    9)
	ms-blast-dbs
	;;
    
    10)
	printf "Gene name? "
	read gene
	if [ 0"$gene" != 0 ]; then
	    cd BLAST-DB
	    ls *.ndb | cut -d . -f -1
	    cd ..
	    printf "Database? "
	    read db
	    ms-blast $gene $db
	fi
	;;
    
    Q|q)
	exit 0
	;;
	
    *)
	printf "Invalid selection: $selection\n"
	;;
    esac
    pause
done
